
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
}


group = 'com.elanza48'
description = 'TourismManagementSystem'
java.sourceCompatibility = JavaVersion.VERSION_17
jar.enabled=false

bootJar{
    archivesBaseName="tms"
}

springBoot{
    buildInfo()
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext{
    mapstruct_v='1.5.2.Final'
    mapstruct_binding_v='0.2.0'
    bouncycastle_v='1.71.1'
    auth0_jwt_v='3.19.2'
    mm_jvm_xtra_v='0.2.2'
    openapi_v='1.6.12'
    radison_hibernate_v='3.17.7'
}

// ---- Spring Dependencies ----
dependencies {
    implementation(
        [group:'org.springframework', name:'spring-context-support'],

        [group:'org.springframework.boot', name:'spring-boot-starter-web'],
        [group:'org.springframework.boot', name:'spring-boot-starter-hateoas'],
        [group:'org.springframework.boot', name:'spring-boot-starter-data-jpa'],
        [group:'org.springframework.boot', name:'spring-boot-starter-security'],
        [group:'org.springframework.boot', name:'spring-boot-starter-cache'],
        [group:'org.springframework.boot', name:'spring-boot-starter-log4j2'],
        [group:'org.springframework.boot', name:'spring-boot-starter-actuator']
    )

    testImplementation(
        [group:'org.springframework.boot', name:'spring-boot-starter-test'],
        [group:'org.springframework.security', name:'spring-security-test']
    )

    developmentOnly group:'org.springframework.boot', name:'spring-boot-devtools'
}

// ---- Other dependencies ----
dependencies {
    runtimeOnly(
        [group:'org.postgresql', name:'postgresql']
    )

    compileOnly(
        [group:'org.redisson', name:'redisson-hibernate-53', version:"${radison_hibernate_v}"],
        [group:'org.projectlombok', name:'lombok']
    )

    implementation(
        [group:'org.hibernate.validator', name:'hibernate-validator'],
        [group:'org.hibernate', name:'hibernate-jcache'],

        [group:'javax.cache', name:'cache-api'],
        [group:'org.ehcache', name:'ehcache'],

        [group:'io.micrometer', name:'micrometer-registry-prometheus'],
        [group:'io.github.mweirauch', name:'micrometer-jvm-extras', version:"${mm_jvm_xtra_v}"],

        [group:'com.auth0', name:'java-jwt', version:"${auth0_jwt_v}"],

        [group:'org.bouncycastle', name:'bcprov-jdk18on', version:"${bouncycastle_v}"],
        [group:'org.bouncycastle', name:'bcpkix-jdk18on', version:"${bouncycastle_v}"],
        [group:'org.bouncycastle', name:'bcutil-jdk18on', version:"${bouncycastle_v}"],

        [group:'org.mapstruct', name:'mapstruct', version:"${mapstruct_v}"]
    )

    annotationProcessor(
        [group:'org.mapstruct', name:'mapstruct-processor', version:"${mapstruct_v}"],
        [group:'org.projectlombok', name:'lombok'],
        [group:'org.projectlombok', name:'lombok-mapstruct-binding', version:"${mapstruct_binding_v}"]
    )
}

configurations {
    developmentOnly
    runtimeClasspath {
		extendsFrom developmentOnly
	}
    compileOnly {
        extendsFrom annotationProcessor
    }
    all{
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs =[
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

tasks.named("bootJar") {
    layered {
		enabled = true
        includeLayerTools = true
	}
}

test{
    useJUnitPlatform()
}
